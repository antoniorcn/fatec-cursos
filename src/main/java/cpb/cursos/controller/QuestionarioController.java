/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cpb.cursos.controller;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import cpb.cursos.model.Categoria;
import cpb.cursos.model.CategoriaDTO;
import cpb.cursos.model.Contato;
import cpb.cursos.model.Horario;
import cpb.cursos.model.Pergunta;
import cpb.cursos.model.Questionario;
import cpb.cursos.model.Resposta;
import cpb.cursos.repository.CategoriaRepository;
import cpb.cursos.repository.ContatoRepository;
import cpb.cursos.repository.HorarioRepository;
import cpb.cursos.repository.PerguntaRepository;
import cpb.cursos.repository.RespostaRepository;

@Controller
@EnableAutoConfiguration
public class QuestionarioController {
	
    private CategoriaRepository categoriaRepository;
	private PerguntaRepository perguntaRepository;
	private ContatoRepository contatoRepository;
	private RespostaRepository respostaRepository;
	private HorarioRepository horarioRepository;
	
	public List<CategoriaDTO> generateListCategoriaDTO(List<Categoria> categorias) { 
		List<CategoriaDTO> categoriaDTO = new ArrayList<>();
		for (Categoria categoria : categorias) {
			CategoriaDTO catDTO = categoria.generateDTO();
			List<Pergunta> perguntas = perguntaRepository.findByCategoria(categoria);
			for (Pergunta perg : perguntas ) { 
				Resposta resp = new Resposta();
				resp.setPergunta(perg);
				catDTO.getRespostas().add(resp);
			}
			categoriaDTO.add(catDTO);
		}
		return categoriaDTO;
	}
    
    public QuestionarioController(CategoriaRepository categoriaRepository, 
    		PerguntaRepository perguntaRepository,
    		ContatoRepository contatoRepository,
    		HorarioRepository horarioRepository,
    		RespostaRepository respostaRepository
    		) {
		this.categoriaRepository = categoriaRepository;
		this.perguntaRepository = perguntaRepository;
		this.horarioRepository = horarioRepository;
		this.contatoRepository = contatoRepository;
		this.respostaRepository = respostaRepository; 
    }
    
    public static Pergunta findPerguntaById(Collection<Pergunta> listPergunta, long id) {
        return listPergunta.stream().filter(pergunta -> pergunta.getId() == id).findFirst().orElse(null);
    }

	@RequestMapping(path = {"/questionario"}, method = RequestMethod.GET)
    private ModelAndView questionarioGet() {
    	List<CategoriaDTO> categorias = generateListCategoriaDTO(categoriaRepository.findAll(Sort.by(Sort.Direction.ASC, "indice")));
    	List<Pergunta> perguntas = perguntaRepository.findAll();
    	ModelAndView mv = new ModelAndView("questionario");
    	mv.addObject("categorias", categorias);
    	mv.addObject("questionario", new Questionario(perguntas));
    	return mv;
    }	
	
	@RequestMapping(path = {"/questionario"}, method = RequestMethod.POST)
    private ModelAndView questionarioPost(@ModelAttribute(name = "questionario") Questionario questionario, 
    		@RequestParam Map<String, String> allParams,
    		@RequestParam("txtHorario") String[] horarios,
    		@RequestParam("txtRespostas") String[] respostas) {
		List<Pergunta> perguntas = perguntaRepository.findAll();
		System.out.println(questionario);
		Contato c = contatoRepository.save(questionario.getContato());
		System.out.printf("\nContato %s salvo com sucesso", c.getNome());
		System.out.println("\nHorarios escolhidos");
		for (String h : horarios) {
			Horario hor = new Horario();
			hor.setContato(c);
			hor.setHorario(h);
			horarioRepository.save(hor);
			System.out.print(h + ", ");
		}

		System.out.println("\nRespostas marcadas");
		for (String h : respostas) {
			long id = Long.parseLong(h);
			Resposta r = new Resposta();
			Pergunta p = findPerguntaById(perguntas, id);
			if (allParams.containsKey("espec-texto" + id)) { 
				r.setEspecialistaPergunta(allParams.get("espec-texto" + id));
			}
			r.setPergunta(p);
			r.setContato(c);
			respostaRepository.save(r);
			System.out.print(h + ", ");
		}				
		
		// espec-texto54
		ModelAndView mv = new ModelAndView("sucesso");
		mv.addObject("mensagem", "Question√°rio gravado com sucesso");
		return mv;
	}
}
