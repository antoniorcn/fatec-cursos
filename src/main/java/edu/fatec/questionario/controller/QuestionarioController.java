/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.fatec.questionario.controller;

import edu.fatec.questionario.model.*;
import edu.fatec.questionario.services.ElementoService;
import edu.fatec.questionario.services.ProcessaQuestionario;
import edu.fatec.questionario.services.ProcessaResposta;
import edu.fatec.questionario.services.QuestionarioService;
import edu.fatec.questionario.util.QuestionarioUtil;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.stereotype.Controller;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import java.util.*;

@Controller
@EnableAutoConfiguration
public class QuestionarioController {

	private final QuestionarioService questionarioService;
	private final ElementoService elementoService;
	private final LanguageUtils languageUtils;

	private final Map<String, Integer> summaryResponses = new HashMap<>();
	private final Map<String, ProcessaResposta> engineRepsonses = new HashMap<>();
	private final Map<String, ProcessaQuestionario> engineQuestionarioBefore = new HashMap<>();
	private final Map<String, ProcessaQuestionario> engineQuestionarioAfter = new HashMap<>();
	private String mensagemResultado = "";
	private int totalGeralPontosRadioLabel = 0;

	void generateProcessorEngines() {
		engineQuestionarioBefore.put("RESET", q -> {
			summaryResponses.clear();
			totalGeralPontosRadioLabel = 0;
			return true;
		});
		engineRepsonses.put("SUMMARIZE_RADIO", r-> {
			if ("radioLabelValue".equals(r.getTipo())) {
				if (summaryResponses.containsKey(r.getValor())) {
					int total = summaryResponses.get(r.getValor());
					summaryResponses.put(r.getValor(), total + 1);
				} else {
					summaryResponses.put(r.getValor(), 1);
				}
				totalGeralPontosRadioLabel += 1;
			}
			return true;
		});
		engineQuestionarioAfter.put("SHOW_INFO", q -> {
			float percentA = (float) summaryResponses.get("A") / (float) totalGeralPontosRadioLabel;
			float percentC = (float) summaryResponses.get("C") / (float) totalGeralPontosRadioLabel;
			float percentI = (float) summaryResponses.get("I") / (float) totalGeralPontosRadioLabel;
			float percentO = (float) summaryResponses.get("O") / (float) totalGeralPontosRadioLabel;
			StringBuffer sb = new StringBuffer("Que tipo de animal você é:<br/>\n");
			sb.append(String.format("\tPorcentagem Tubarão = %d <br/>%n", (int)(percentA * 100)));
			sb.append(String.format("\tPorcentagem Gato = %d <br/>%n", (int)(percentC * 100)));
			sb.append(String.format("\tPorcentagem Aguia = %d <br/>%n", (int)(percentI * 100)));
			sb.append(String.format("\tPorcentagem Lobo = %d <br/>%n", (int)(percentO * 100)));
			mensagemResultado = sb.toString();
			System.out.println(summaryResponses);
			System.out.println(mensagemResultado);
			return true;
		});

	}

	@GetMapping(path = {"/questionario/teste"})
	public String teste() {
		System.out.println("### Teste acionado");
		return "inexistente";
	}
	
	public List<SecaoDTO> generateListCategoriaDTO(List<Secao> secoes) {
		List<SecaoDTO> secaoDTO = new ArrayList<>();
		for (Secao secao : secoes) {
			SecaoDTO catDTO = secao.generateDTO();
			List<Elemento> elementos = elementoService.procurarPorSecao(secao);
			for (Elemento elemento : elementos) {
				catDTO.getRespostas().add(elemento);
			}
			secaoDTO.add(catDTO);
		}
		return secaoDTO;
	}
    
    public QuestionarioController(ElementoService elementoService,
								  QuestionarioService questionarioService,
								  LanguageUtils languageUtils) {
		this.elementoService = elementoService;
		this.questionarioService = questionarioService;
		this.languageUtils = languageUtils;
		generateProcessorEngines();
	}
    
    public static Elemento findPerguntaById(Collection<Elemento> listElemento, long id) {
        return listElemento.stream().filter(pergunta -> pergunta.getId() == id).findFirst().orElse(null);
    }

	@GetMapping(path = {"/questionario/{questionario}"})
    public ModelAndView questionarioGet(@PathVariable("questionario") String questionarioNome) {
		Questionario questionario = questionarioService.retrieveQuestionarioPorNome(questionarioNome);
		ModelAndView mv = new ModelAndView();
		System.out.println("### questionarioGet - Acessado: " + questionarioNome);
		if (questionario != null) {
			// Define os numero das questões
			int indiceQuestao = 0;
			for (Elemento e : questionario.getElementos()) {
				if (QuestionarioUtil.isPergunta(e) && !e.getTipo().equals("labelInputTextSemNumero")) {
					e.setNumeroQuestao(++indiceQuestao);
				}
			}
			mv.setViewName("questionario");
			mv.addObject("questionario", questionario);
			mv.addObject("questionarioNome", questionarioNome);
			mv.addObject("languageUtils", languageUtils);
			// System.out.println("Language Utils Lista Gerada: " + languageUtils.getLista().toString());
		} else {
			mv.setViewName("inexistente");
		}
    	return mv;
    }
	
	@PostMapping(path = {"/questionario/{questionario}"})
    public ModelAndView questionarioPost(	@PathVariable("questionario") String questionarioNome,
											@RequestParam MultiValueMap<String, String> allParams) {
		Questionario questionario = questionarioService.retrieveQuestionarioPorNome(questionarioNome);
		mensagemResultado = "Questionario gravado com sucesso";
		if (questionario != null) {
			// processa questionarios after
			for ( String engine :  engineQuestionarioBefore.keySet()) {
				ProcessaQuestionario proc = engineQuestionarioBefore.get(engine);
				proc.processa(questionario);
			}

			QuestionarioResposta questionarioResposta = new QuestionarioResposta(questionario);
			// System.out.println("Post acionado: " + questionarioResposta.getId());
			for (String paramName : allParams.keySet()) {
				for (Resposta resp : questionarioResposta.getRespostas()) {
					System.out.println("Analisando resposta: " + resp.getVariavel());
					if (resp.getVariavel().equals(paramName)) {
						List<String> params = allParams.get(paramName);
						if (params.size() > 1) {
							resp.setValor(LanguageUtils.consolidateList(params));
						} else {
							resp.setValor(allParams.getFirst(paramName));
						}

						// processa respostas por engines
						for ( String engine :  engineRepsonses.keySet()) {
							ProcessaResposta proc = engineRepsonses.get(engine);
							proc.processa(resp);
						}

						// System.out.println("Resposta definida: " + paramName + "  Valor: " + resp.getValor());
					}
				}
			}

			// processa questionarios after
			for ( String engine :  engineQuestionarioAfter.keySet()) {
				ProcessaQuestionario proc = engineQuestionarioAfter.get(engine);
				proc.processa(questionario);
			}

			List<Resposta> respostasNome = QuestionarioUtil.procurarRespostaPeloTipo(questionarioResposta, "contatoNome");
			if (!respostasNome.isEmpty()) {
				questionarioResposta.getContato().setNome(respostasNome.get(0).getValor());
			}

			List<Resposta> respostasEmail = QuestionarioUtil.procurarRespostaPeloTipo(questionarioResposta, "contatoEmail");
			if (!respostasEmail.isEmpty()) {
				questionarioResposta.getContato().setEmail(respostasEmail.get(0).getValor());
			}

			List<Resposta> respostasTelefone = QuestionarioUtil.procurarRespostaPeloTipo(questionarioResposta, "contatoTelefone");
			if (!respostasTelefone.isEmpty()) {
				questionarioResposta.getContato().setTelefone(respostasTelefone.get(0).getValor());
			}
			questionarioService.salvarQuestionarioRespostas(questionarioResposta);
		}
		ModelAndView mv = new ModelAndView("resultado");
		mv.addObject("mensagem", mensagemResultado);
		return mv;
	}
}
